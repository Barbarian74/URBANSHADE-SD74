document.addEventListener('DOMContentLoaded', () => {
    const backgroundAudio = document.getElementById('backgroundAudio');
    const activateSoundBtn = document.getElementById('activateSoundBtn');

    const soundActivationStep = document.getElementById('soundActivationStep');
    const authStep = document.getElementById('authStep');
    const objectListStep = document.getElementById('objectListStep');

    const passwordInput = document.getElementById('passwordInput');
    const enterAuthBtn = document.getElementById('enterAuthBtn');
    const authErrorMessage = document.getElementById('authErrorMessage');
    const screenGlitchOverlay = document.getElementById('screenGlitchOverlay');

    const objectListContainer = document.getElementById('objectList');
    const detailsTitle = document.getElementById('detailsTitle');
    const detailsId = document.getElementById('detailsId');
    const detailsType = document.getElementById('detailsType');
    const detailsStatus = document.getElementById('detailsStatus');
    const detailsLastContact = document.getElementById('detailsLastContact');
    const progressBar = document.getElementById('progressBar'); // Добавлен элемент прогресс-бара
    const detailsDescription = document.getElementById('detailsDescription');

    const CORRECT_PASSWORD = '95489548';
    const ERROR_SOUND_PATH = 'assets/audio/error.mp3';

    // Расширенные данные об объектах (Ваши данные)
    const objectData = {
        '001': {
            id: '#001',
            name: 'Предвестник Смерти',
            type: 'Антропоморфная Сущность',
            status: 'НЕИЗВЕСТНО',
            lastContact: '████-03-17 / 14:30 UTC',
            description: 'Аномалия возникла в результате инцидента с участием заместителя ████████ (Кирилл), нарушившего протоколы при работе с аппаратом переноса сознания. Субъект погиб, в результате чего произошла трансформация его психоэнергетической матрицы в автономную, крайне враждебную форму. Предвестник Смерти проявляется исключительно в нижних секторах Hadal Complex. В редких случаях может быть замечен на верхних уровнях. Частота появления — крайне низкая, но каждый зарегистрированный инцидент завершался 100% летальностью среди контактных лиц. Характеристики объекта: Нестабильная форма и оболочка, способна к фазовым искажениями; Воздействует на пси-поле и когнитивные центры жертвы. При приближении субъекта фиксируются: Острые головные боли; Самопроизвольное открытие/закрытие мебели и оборудования; Смена освещения на красный режим тревоги; Немедленный запуск протокола экстренной эвакуации. Контакт с субъектом зачастую невозможен. Все попытки взаимодействия или подавления приводят к мгновенной агрессии и гибели.'
        },
        '014': {
            id: '#014',
            name: 'Закованный Цепями',
            type: 'Биологическая Сущность',
            status: 'СОДЕРЖИТСЯ',
            lastContact: '1997-01-09 / 09:15 UTC',
            description: 'Объект был обнаружен в ходе глубоководной экспедиции в океаническом жёлобе. В результате операции Urbanshade понесла утрату сотрудника с позывным «ГУСЬ». Анализ видеозаписи с его костюма зафиксировал наличие паразитарных форм, провоцирующих резкие мутации живых организмов. Мутировавший субъект визуально напоминает деформированную рыбу-каплю с носовой частью, схожей с повреждениями от цепных связок. Объект постоянно испускает психотропный газ, вызывающий тяжёлые галлюцинации, ведущие к смерти.'
        },
        '045': {
            id: '#045',
            name: 'Система Безопасности и Навигации',
            type: 'Внутренняя система Hadal Complex',
            status: 'НАРУШЕНО',
            lastContact: '2024-06-23 / 23:00 UTC',
            description: 'Система Безопасности и Навигации (СБН) — централизованный модуль Hadal Complex, обеспечивающий контроль передвижений персонала, мониторинг в реальном времени и автоматическую реакцию на внутренние угрозы. Интегрирована с видеонаблюдением, биометрическими датчиками, шлюзами и маршрутами эвакуации. СБН функционирует автономно при любых отказах внешней инфраструктуры. Навигационный модуль строит адаптивные маршруты с учётом заблокированных зон и угроз. Система работает на базе ИИ и фрагментированного сознания бывшего диспетчера Даниэля Мозалевского, по чьему распоряжению в строгой секретности был инициирован её запуск.'
        },
        '072': {
            id: '#072',
            name: 'Хорошие Люди',
            type: 'Биологическая Сущность',
            status: 'СОДЕРЖИТСЯ',
            lastContact: '2011-12-15 / 08:00 UTC',
            description: 'Термин «Хорошие Люди» используется персоналом в качестве условного обозначения аномального субъекта, возникшего в результате побочного воздействия фрагмента объекта #███ на испытуемого [14-88: Доминик Мозалевский]. В течение нескольких минут после контакта испытуемый прошёл агрессивную фазу мутации, утрачивая все признаки человеческой морфологии. Результирующая форма — мясоподобное образование, обладающее высоким уровнем патогенного и ментального воздействия. В ходе последовавшего за этим саботажа неустановленного характера, под влияние субъекта попали ещё 108 сотрудников. Под воздействием объекта наблюдались поведенческие отклонения, утрата коммуникативных функций и дальнейшее исчезновение персонала. Текущее местоположение существ предположительно локализованы за закрытыми дверями нижнего сектора Hadal Complex. Все известные проходы в данный сектор были технически изолированы и заблокированы.'
        },
        '099': {
            id: '#099',
            name: 'Пустотные Сгустки',
            type: 'Неизвестное Глубоководное Образование',
            status: 'ИССЛЕДУЕТСЯ',
            lastContact: '2001-09-11 / 18:45 UTC',
            description: 'Объект представляет собой аморфную массу неизвестной природы, визуально напоминающую черную вязкую субстанцию с наличием множественных глазообразных образований различного цвета. Обнаружен на глубине 13 км под водой в ходе автономного погружения группой водолазов [Kolbaz, Freon]. Идентифицированные варианты глазных образований: Синий, Фиолетовый, Желтый, Бирюзовый, Красный. Поведенческие корреляции: Красные глаза — выраженная агрессия; Бирюзовые глаза — высокая активность и подвижность; Остальные цвета — неопределённые поведенческие паттерны. На протяжении последнего месяца зафиксированы многочисленные сообщения от персонала о визуальных проявлениях объекта внутри защитных шкафов и закрытых отсеков. Анализ показал, что более 40% стандартных шкафов подверглись внутреннему заражению. При открытии, субстанция осуществляет немедленный захват субъекта, сопровождающийся его полной деструкцией. Причина гибели: не установлена. По рабочей гипотезе исследовательского отдела (НИО), воздействие объекта вызывает дезинтеграцию органических структур до атомарного уровня, что может быть связано с антиматериальной природой сгустка. Механизм данной реакции остаётся невыясненным и не поддаётся моделированию стандартными средствами.'
        },
        '177': {
            id: '#177',
            name: 'Розовый Удильщик',
            type: 'Биологическая Сущность',
            status: 'СОДЕРЖИТСЯ',
            lastContact: '1995-01-07 / 23:21 UTC',
            description: 'В рамках программы FELINEX была разработана экспериментальная инъекция, направленная на создание гуманоидных гибридов с фелинной морфологией (т.н. «кошко-люди»). Целью являлось улучшение сенсорики, рефлексов и социальной адаптивности объектов. Первичный прототип был введён испытуемому с идентификатором [22-8: Иван]. Вопреки ожиданиям исследовательской группы, результатом инъекции стало формирование крайне агрессивного и аномального организма, условно классифицированного как "Розовый Удильщик", с примерными габаритами 3×3 метра. Цвет аномалии: ярко-розовый. Полное отсутствие ожидаемых фелинных признаков. Не наблюдается мерцание освещения при появлении (в отличие от объекта #014). При манифестации объекта фиксируется продолжительный и крайне громкий крик, вызывающий дезориентацию у персонала. Уровень угрозы: МАКСИМАЛЬНЫЙ!'
        },
        '265': {
            id: '#265',
            name: 'Обиталище Демонов',
            type: 'Биологическая Сущность',
            status: 'НАРУШЕНО',
            lastContact: '1992-10-03 / 03:03 UTC',
            description: 'Объект представляет собой агрессивную биологическую аномалию, внешне схожую с глубоководным удильщиком. Характерной особенностью являются множественные люминесцентные образования в области ротовой полости, используемые предположительно для дезориентации жертвы. Объект проявляет выраженную преследующую активность: цель отслеживается до полной нейтрализации, включая попытки укрытия в стандартных защитных модулях (шкафах укрытия и аналогичных конструкциях). Объект демонстрирует способность таранить и повреждать защитные укрытия, что приводит к летальному исходу для укрывающегося сотрудника. Появление объекта сопровождается следующими признаками: Интервальный мерцающий режим освещения, переходящий в полное отключение света; Звук высокоинтенсивного металлического скрежета неизвестного происхождения. Ввиду специфической внешности и поведенческих черт, персоналом комплекса объект неформально ассоциируется с начальником Марианского сектора — Артемием Станиславиком. Данная ассоциация не имеет научного подтверждения, однако может указывать на потенциальное происхождение объекта или эффект психофизиологического отражения у сотрудников.'
        }
    };

    // let typewriterTimeout; // Для хранения таймаута для эффекта самопечати - УДАЛЕНО

    // --- Функция управления отображением экранов ---
    function showStep(stepElement) {
        // Находим текущий активный шаг
        const currentActiveStep = document.querySelector('.modal-container.active, .main-interface-container.active');

        if (currentActiveStep) {
            // Запускаем анимацию исчезновения для текущего шага
            currentActiveStep.classList.add('inactive');
            currentActiveStep.addEventListener('animationend', () => {
                currentActiveStep.classList.remove('active', 'inactive'); // Убираем классы после анимации
                stepElement.classList.add('active'); // Активируем новый шаг
            }, { once: true }); // Слушатель сработает только один раз
        } else {
            // Если активных шагов нет, просто показываем новый
            stepElement.classList.add('active');
        }
    }

    // --- Функция загрузки описания с прогресс-баром ---
    function loadDescriptionWithProgress(text, element, barElement) {
        element.classList.remove('loaded'); // Скрываем текст
        element.textContent = ''; // Очищаем текст
        barElement.style.width = '0%'; // Сбрасываем прогресс-бар

        // Небольшая задержка перед началом анимации, чтобы сброс был заметен
        setTimeout(() => {
            barElement.style.transition = 'width 1.5s ease-out'; // Анимация заполнения 1.5 секунды
            barElement.style.width = '100%'; // Запускаем заполнение

            setTimeout(() => {
                element.textContent = text; // Показываем полный текст
                element.classList.add('loaded'); // Делаем текст видимым
                barElement.style.transition = 'none'; // Отключаем transition для быстрого сброса
                barElement.style.width = '0%'; // Сбрасываем прогресс-бар для следующего использования
            }, 1500); // Должно соответствовать длительности transition progress-bar
        }, 100);
    }


    // --- 1. Модальное окно - запрос аудио ---
    activateSoundBtn.addEventListener('click', () => {
        backgroundAudio.volume = 0.5; // Установка громкости
        backgroundAudio.play()
            .then(() => {
                console.log("Фоновое аудио активировано.");
                showStep(authStep); // Переход к окну авторизации
                passwordInput.focus(); // Устанавливаем фокус на поле ввода
            })
            .catch(e => {
                console.error("Не удалось воспроизвести фоновое аудио:", e);
                alert("Не удалось включить звук. Возможно, браузер блокирует автовоспроизведение без взаимодействия. Продолжаем без звука.");
                showStep(authStep); // Продолжаем к авторизации даже без звука
                passwordInput.focus();
            });
    });

    // --- 2. Окно авторизации ---
    const handleAuthAttempt = () => {
        const enteredPassword = passwordInput.value.toLowerCase(); // Пароль без учета регистра
        if (enteredPassword === CORRECT_PASSWORD) {
            authErrorMessage.classList.remove('active'); // Скрываем сообщение об ошибке
            passwordInput.value = ''; // Очищаем поле ввода
            showStep(objectListStep); // Переход к главному интерфейсу

            // Активируем первый элемент списка объектов по умолчанию
            setTimeout(() => {
                 const firstItem = document.querySelector('.object-item');
                 if (firstItem) {
                     firstItem.click(); // Программно кликаем по первому элементу
                 }
            }, 600); // Небольшая задержка для завершения анимации перехода
        } else {
            new Audio(ERROR_SOUND_PATH).play().catch(e => console.log("Не удалось воспроизвести звук ошибки:", e));
            authErrorMessage.classList.add('active'); // Показываем сообщение об ошибке
            passwordInput.value = ''; // Очищаем поле ввода
            passwordInput.focus(); // Возвращаем фокус

            // Эффект короткого глитча на весь экран
            screenGlitchOverlay.classList.add('active');
            screenGlitchOverlay.addEventListener('animationend', () => {
                screenGlitchOverlay.classList.remove('active');
            }, { once: true });
        }
    };

    enterAuthBtn.addEventListener('click', handleAuthAttempt);
    passwordInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            handleAuthAttempt();
        }
    });

    // --- 3. Интерфейс объектов ---
    objectListContainer.addEventListener('click', (e) => {
        const selectedItem = e.target.closest('.object-item');
        if (selectedItem) {
            // Удаляем класс 'selected' у всех элементов
            document.querySelectorAll('.object-item').forEach(item => {
                item.classList.remove('selected');
            });
            // Добавляем класс 'selected' к выбранному элементу
            selectedItem.classList.add('selected');

            const objectId = selectedItem.dataset.id; // Получаем ID объекта из data-атрибута
            const data = objectData[objectId]; // Получаем данные по ID

            if (data) {
                // Заполняем поля информации
                detailsTitle.textContent = `[ ОБЪЕКТ ${data.id} : ${data.name.toUpperCase()} ]`;
                detailsId.textContent = data.id;
                detailsType.textContent = data.type;
                detailsStatus.textContent = data.status;
                detailsLastContact.textContent = data.lastContact;

                // Запускаем загрузку описания с прогресс-баром вместо самопечати
                loadDescriptionWithProgress(data.description, detailsDescription, progressBar);
            } else {
                // Если данные не найдены
                detailsTitle.textContent = '[ ДАННЫЕ ОБЪЕКТА НЕДОСТУПНЫ ]';
                detailsId.textContent = '---';
                detailsType.textContent = '---';
                detailsStatus.textContent = '---';
                detailsLastContact.textContent = '---';
                loadDescriptionWithProgress('Секретная информация об этом объекте отсутствует в базе данных. Проверьте запрос.', detailsDescription, progressBar);
            }
        }
    });

    // Инициализация: показываем первое окно при загрузке страницы
    showStep(soundActivationStep);
});
